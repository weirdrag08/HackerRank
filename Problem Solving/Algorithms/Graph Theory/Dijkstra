#include<iostream>
#include<unordered_map>
#include<list>
#include<queue>
#include<climits>
using namespace std;

class Graph{
public: 
    unordered_map<int, list<pair<int, int> > > gmap;

    void addEdge(int src, int dest, int distance){
        gmap[src].push_back(make_pair(dest, distance));
        gmap[dest].push_back(make_pair(src, distance));
    }

    void dijkstra(int V, int E, Graph g, int s){
        priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > pq;
        bool *visited = new bool[V];
        int *distance = new int[V];

        for(int i = 0; i < V; i++){
            if(i == s){
                distance[i] = 0;
            }
            else{
                distance[i] = INT_MAX;
            }
            visited[i] = false;
        }
        int src = s;
        pq.push(make_pair(distance[src], src));
        while(!pq.empty()){
            pair<int, int> top = pq.top();
            pq.pop();
            if(visited[top.second] == true){
                continue;
            }
            visited[top.second] = true;
             
            for(auto neighbour : gmap[top.second]){
                int child = neighbour.first;
                int child_from_vtx = neighbour.second;
                int child_from_src = top.first + neighbour.second;
                
                if(child_from_src < distance[child]){
                    distance[child] = child_from_src;
                    pq.push(make_pair(distance[child], child));
                }  
            }
        }
        for(int i = 0; i < V; i++){
            if(i == s){
                continue;
            }
            else{
                if(distance[i] == INT_MAX){
                 cout << "-1" << " ";   
            }
            
            else{
               cout << distance[i] << " ";
              }
            }
        } 
    }
};

int main(){
    std::ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    int tc;
    cin >> tc;
   for(int i = 0; i < tc; i++){
    Graph g;
    int V, E, u, v, d, s;
    cin >> V >> E;
    for(int i = 0; i < E; i++){
        cin >> u >> v >> d;
        g.addEdge(u - 1, v - 1, d);
    }
    cin >> s;
    s -= 1;
    g.dijkstra(V, E, g, s);
    cout << '\n';
   }
}
